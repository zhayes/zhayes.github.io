<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在这做一些日常搜索的笔记]]></title>
    <url>%2F2019%2F01%2F09%2Fnote%2F</url>
    <content type="text"><![CDATA[当使用makemigrations时报错No changes detected：(转https://blog.csdn.net/qq_39291784/article/details/78397589) 在修改了models.py后，有些用户会喜欢用python manage.py makemigrations生成对应的py代码。 但有时执行python manage.py makemigrations命令（也可能人比较皮，把migrations文件夹给删了），会提示”No changes detected.” 可能有用的解决方式如下： 先 python manage.py makemigrations –empty yourappname 生成一个空的initial.py 再 python manage.py makemigrations 生成原先的model对应的migration file 记录下git的一些操作指令，有时候忘了老要查(转https://www.jianshu.com/p/3be4029ce854) 123456789101112131415161718192021git branch -r #查看远程所有分支git branch #查看本地所有分支git branch -a #查看本地及远程的所有分支，如下图git fetch #将某个远程主机的更新，全部取回本地：git branch -a #查看远程分支git branch #查看本地分支：git checkout 分支 #切换分支：git push origin -d 分支名 #删除远程分支: git branch -d 分支名 #删除本地分支git remote show origin #查看远程分支和本地分支的对应关系git remote prune origin #删除远程已经删除过的分支 情景1：同步别人新增到远程的分支12341.git branch查看一下本地分支，再git branch -a查看一下远程分支，对比下，远程存在哪些本地没有的新分支. 2.将某个远程主机的更新，全部取回本地：git fetch 3.再次查看远程分支：git branch -a 发现远程的分支已经可以看见了 4.拉取远程分支到本地：git checkout -b 远程分支名 情景2：本地删除了分支，远程也想删除2.1:本地想要删除某个分支，远程仓库的这个分支也要删掉怎么办？12345a.使用git branch -d 分支名来删除本地分支。 b.使用git push origin -d 分支名直接来删除远程分支。在次使用git branch -a,发现分支已经不存在了。or a.使用git branch -d 分支名来删除本地分支。 b.最简单的解决办法就是直接到gitlab/github进行删除. 2.2:只把远程的删除掉怎么办？123a.使用git push origin -d 分支名直接来删除远程分支。此时删除的只是远程的分支，本地仍然存在ora.直接到gitlab/github进行删除. 2.3:远程删除了分支，本地也想删除eg:直接到gitlab/github删除了某个分支，我在本地使用git branch -a查看远程分支，依然存在并且可以切换使用。我本地也想把远程分支记录删除怎么办？123456789101112131415161718191.git branch -a查看远程分支，红色的是本地远程远程分支记录。2.执行下面命令查看远程仓库分支和本地仓库的远程分支记录的对应关系： git remote show origin 3.会看到： refs/remotes/origin/远程仓库已经删除的分支名 stale (use &apos;git remote prune&apos; to remove) 其中： Local refs configured for &apos;git push&apos;: 命令下面的分支是本地仓库的远程分支记录中仍存在的分支，但远程仓库已经不存在。4.输入git remote prune origin来删除远程仓库已经删除过的分支5.验证 git branch -a 此时可以看到本地远程分支记录已经和远程仓库保持一致了。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深刻理解Python中的元类(metaclass)（转）]]></title>
    <url>%2F2019%2F01%2F01%2Fmetaclass%2F</url>
    <content type="text"><![CDATA[原文转载地址（http://blog.jobbole.com/21351/） 译注：这是一篇在Stack overflow上很热的帖子。提问者自称已经掌握了有关Python OOP编程中的各种概念，但始终觉得元类(metaclass)难以理解。他知道这肯定和自省有关，但仍然觉得不太明白，希望大家可以给出一些实际的例子和代码片段以帮助理解，以及在什么情况下需要进行元编程。于是e-satis同学给出了神一般的回复，该回复获得了985点的赞同点数，更有人评论说这段回复应该加入到Python的官方文档中去。而e-satis同学本人在Stack Overflow中的声望积分也高达64271分。以下就是这篇精彩的回复（提示：非常长） 类也是对象 在理解元类之前，你需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立： 1234567class ObjectCreator(object): passmy_object = ObjectCreator()print my_object&lt;__main__.ObjectCreator object at 0x8974f2c&gt; 但是，Python中的类还远不止如此。类同样也是一种对象。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。下面的代码段： 12class ObjectCreator(object): pass 将在内存中创建一个对象，名字就是ObjectCreator。这个对象（类）自身拥有创建对象（类实例）的能力，而这就是为什么它是一个类的原因。但是，它的本质仍然是一个对象，于是乎你可以对它做如下的操作： 1) 你可以将它赋值给一个变量 2) 你可以拷贝它 3) 你可以为它增加属性 4) 你可以将它作为函数参数进行传递 下面是示例： 123456789101112131415161718192021print ObjectCreator # 你可以打印一个类，因为它其实也是一个对象&lt;class '__main__.ObjectCreator'&gt;def echo(o): print oecho(ObjectCreator) # 你可以将类做为参数传给函数&lt;class '__main__.ObjectCreator'&gt;print hasattr(ObjectCreator, 'new_attribute')FasleObjectCreator.new_attribute = 'foo' # 你可以为类增加属性print hasattr(ObjectCreator, 'new_attribute')Trueprint ObjectCreator.new_attributefooObjectCreatorMirror = ObjectCreator # 你可以将类赋值给一个变量print ObjectCreatorMirror()&lt;__main__.ObjectCreator object at 0x8997b4c&gt; 动态地创建类 因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。 1234567891011121314151617def choose_class(name): if name == 'foo': class Foo(object): pass return Foo # 返回的是类，不是类的实例 else: class Bar(object): pass return BarMyClass = choose_class('foo')print MyClass # 函数返回的是类，不是类的实例&lt;class '__main__'.Foo&gt;print MyClass() # 你可以通过这个类创建类实例，也就是对象&lt;__main__.Foo object at 0x89c6d4c&gt; 但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样： 12345678print type(1)&lt;type 'int'&gt;print type("1")&lt;type 'str'&gt;print type(ObjectCreator)&lt;type 'type'&gt;print type(ObjectCreator())&lt;class '__main__.ObjectCreator'&gt; 这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性） type可以像这样工作： type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）) type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）) 比如下面的代码： 1234567891011class MyShinyClass(object): pass#可以手动像这样创建：MyShinyClass = type('MyShinyClass', (), &#123;&#125;) # 返回一个类对象print MyShinyClass&lt;class '__main__.MyShinyClass'&gt;print MyShinyClass() # 创建一个该类的实例&lt;__main__.MyShinyClass object at 0x8997cec&gt; 你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。类和变量是不同的，这里没有任何理由把事情弄的复杂。 type 接受一个字典来为类定义属性，因此 12class Foo(object): bar = True 可以翻译为： 12345678910111213141516Foo = type('Foo', (), &#123;'bar':True&#125;)#并且可以将Foo当成一个普通的类一样使用：print Foo&lt;class '__main__.Foo'&gt;print Foo.barTruef = Foo()print f&lt;__main__.Foo object at 0x8a9b84c&gt;print f.barTrue 当然，你可以向这个类继承，所以，如下的代码： 12class FooChild(Foo): pass 就可以写成： 1234567FooChild = type('FooChild', (Foo,),&#123;&#125;)print FooChild&lt;class '__main__.FooChild'&gt;print FooChild.bar # bar属性是由Foo继承而来True 最终你会希望为你的类增加方法。只需要定义一个有着恰当签名的函数并将其作为属性赋值就可以了。 12345678910111213def echo_bar(self): print self.barFooChild = type('FooChild', (Foo,), &#123;'echo_bar': echo_bar&#125;)hasattr(Foo, 'echo_bar')Falsehasattr(FooChild, 'echo_bar')Truemy_foo = FooChild()my_foo.echo_bar()True 你可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当你使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。 到底什么是元类（终于到主题了） 元类就是用来创建类的“东西”。你创建类就是为了创建类的实例对象，不是吗？但是我们已经学习到了Python中的类也是对象。好吧，元类就是用来创建这些类（对象）的，元类就是类的类，你可以这样理解 为： 123456MyClass = MetaClass()MyObject = MyClass()#你已经看到了type可以让你像这样做：MyClass = type('MyClass', (), &#123;&#125;) 这是因为函数type实际上是一个元类。type就是Python在背后用来创建所有类的元类。现在你想知道那为什么type会全部采用小写形式而不是Type呢？好吧，我猜这是为了和str保持一致性，str是用来创建字符串对象的类，而int是用来创建整数对象的类。type就是创建类对象的类。你可以通过检查class属性来看到这一点。Python中所有的东西，注意，我是指所有的东西——都是对象。这包括整数、字符串、函数以及类。它们全部都是对象，而且它们都是从一个类创建而来。 12345678910111213141516age = 35age.__class__&lt;type 'int'&gt;name = 'bob'name.__class__&lt;type 'str'&gt;def foo(): passfoo.__class__&lt;type 'function'&gt;class Bar(object): passb = Bar()b.__class__&lt;class '__main__.Bar'&gt; 现在，对于任何一个class的class属性又是什么呢？ 12345678910111213a.__class__.__class__&lt;type 'type'&gt;age.__class__.__class__&lt;type 'type'&gt;foo.__class__.__class__&lt;type 'type'&gt;b.__class__.__class__&lt;type 'type'&gt; 因此，元类就是创建类这种对象的东西。如果你喜欢的话，可以把元类称为“类工厂”（不要和工厂类搞混了:D） type就是Python的内建元类，当然了，你也可以创建自己的元类。 metaclass属性 你可以在写一个类的时候为其添加metaclass属性。 12345class Foo(object): __metaclass__ = something…class Foo(object): __metaclass__ = something… 如果你这么做了，Python就会用元类来创建类Foo。小心点，这里面有些技巧。你首先写下class Foo(object)，但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找metaclass属性，如果找到了，Python就会用它来创建类Foo，如果没有找到，就会用内建的type来创建这个类。把下面这段话反复读几次。当你写如下代码时 : 12345class Foo(Bar): passclass Foo(Bar): pass Python做了如下的操作： Foo中有metaclass这个属性吗？如果是，Python会在内存中通过metaclass创建一个名字为Foo的类对象（我说的是类对象，请紧跟我的思路）。如果Python没有找到metaclass，它会继续在Bar（父类）中寻找metaclass属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到metaclass，它就会在模块层次中去寻找metaclass，并尝试做同样的操作。如果还是找不到metaclass,Python就会用内置的type来创建这个类对象。 现在的问题就是，你可以在metaclass中放置些什么代码呢？答案就是：可以创建一个类的东西。那么什么可以用来创建一个类呢？type，或者任何使用到type或者子类化type的东东都可以。 自定义元类 元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定metaclass。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。 幸运的是，metaclass实际上可以被任意调用，它并不需要是一个正式的类（我知道，某些名字里带有‘class’的东西并不需要是一个class，画画图理解下，这很有帮助）。所以，我们这里就先以一个简单的函数作为例子开始。 1234567891011121314151617181920212223242526272829# 元类会自动将你通常传给‘type’的参数作为自己的参数传入def upper_attr(future_class_name, future_class_parents, future_class_attr): '''返回一个类对象，将属性都转为大写形式''' # 选择所有不以'__'开头的属性 attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__')) # 将它们转为大写形式 uppercase_attr = dict((name.upper(), value) for name, value in attrs) # 通过'type'来做类对象的创建 return type(future_class_name, future_class_parents, uppercase_attr)__metaclass__ = upper_attr # 这会作用到这个模块中的所有类class Foo(object): # 我们也可以只在这里定义__metaclass__，这样就只会作用于这个类中 bar = 'bip'print hasattr(Foo, 'bar')# 输出: Falseprint hasattr(Foo, 'BAR')# 输出:Truef = Foo()print f.BAR# 输出:'bip' 现在让我们再做一次，这一次用一个真正的class来当做元类。 1234567891011121314# 请记住，'type'实际上是一个类，就像'str'和'int'一样# 所以，你可以从type继承class UpperAttrMetaClass(type): # __new__ 是在__init__之前被调用的特殊方法 # __new__是用来创建对象并返回之的方法 # 而__init__只是用来将传入的参数初始化给对象 # 你很少用到__new__，除非你希望能够控制对象的创建 # 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__ # 如果你希望的话，你也可以在__init__中做些事情 # 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用 def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr): attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__')) uppercase_attr = dict((name.upper(), value) for name, value in attrs) return type(future_class_name, future_class_parents, uppercase_attr) 但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的new方法。现在让我们这样去处理: 12345678class UpperAttrMetaclass(type): def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr): attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__')) uppercase_attr = dict((name.upper(), value) for name, value in attrs) # 复用type.__new__方法 # 这就是基本的OOP编程，没什么魔法 return type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr) 你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的： 12345class UpperAttrMetaclass(type): def __new__(cls, name, bases, dct): attrs = ((name, value) for name, value in dct.items() if not name.startswith('__') uppercase_attr = dict((name.upper(), value) for name, value in attrs) return type.__new__(cls, name, bases, uppercase_attr) 如果使用super方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承） 12345class UpperAttrMetaclass(type): def __new__(cls, name, bases, dct): attrs = ((name, value) for name, value in dct.items() if not name.startswith('__')) uppercase_attr = dict((name.upper(), value) for name, value in attrs) return super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr) 就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因倒并不是因为元类本身，而是因为你通常会使用元类去做一些晦涩的事情，依赖于自省，控制继承等等。确实，用元类来搞些“黑暗魔法”是特别有用的，因而会搞出些复杂的东西来。但就元类本身而言，它们其实是很简单的： 1) 拦截类的创建 2) 修改类 3) 返回修改之后的类 为什么要用metaclass类而不是函数? 由于metaclass可以接受任何可调用的对象，那为何还要使用类呢，因为很显然使用类会更加复杂啊？这里有好几个原因： 1） 意图会更加清晰。当你读到UpperAttrMetaclass(type)时，你知道接下来要发生什么。 2） 你可以使用OOP编程。元类可以从元类中继承而来，改写父类的方法。元类甚至还可以使用元类。 3） 你可以把代码组织的更好。当你使用元类的时候肯定不会是像我上面举的这种简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。 4） 你可以使用new, init以及call这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在new里处理掉，有些人还是觉得用init更舒服些。 5） 哇哦，这东西的名字是metaclass，肯定非善类，我要小心！ 究竟为什么要使用元类？ 现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，你根本就用不上它： “元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。” —— Python界的领袖 Tim Peters 元类的主要用途是创建API。一个典型的例子是Django ORM。它允许你像这样定义： 123class Person(models.Model): name = models.CharField(max_length=30) age = models.IntegerField() 但是如果你像这样做的话： 12guy = Person(name='bob', age='35')print guy.age 这并不会返回一个IntegerField对象，而是会返回一个int，甚至可以直接从数据库中取出数据。这是有可能的，因为models.Model定义了metaclass， 并且使用了一些魔法能够将你刚刚定义的简单的Person类转变成对数据库的一个复杂hook。Django框架将这些看起来很复杂的东西通过暴露出一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。 结语 首先，你知道了类其实是能够创建出类实例的对象。好吧，事实上，类本身也是实例，当然，它们是元类的实例。 123class Foo(object): passid(Foo)142630324 Python中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类，在纯Python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类： 1） Monkey patching 2) class decorators 当你需要动态修改类时，99%的时间里你最好使用上面这两种技术。当然了，其实在99%的时间里你根本就不需要动态修改类 :D]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python内置函数zip]]></title>
    <url>%2F2018%2F12%2F11%2FzipPython%2F</url>
    <content type="text"><![CDATA[python内置函数里有一个zip方法。第一次看起来有点不懂，于是查了下资料，找到一篇不错的文章，便想记录分享一下。原文出处链接点这里。此外我再补充个栈溢出上的问题讨论地址。 zip函数接受任意多个（包括0个和1个）序列作为参数，返回一个tuple列表。具体意思不好用文字来表述，直接看示例： 123456789x = [1, 2, 3]y = [4, 5, 6]z = [7, 8, 9]xyz = zip(x, y, z)print xyz 运行的结果是： [(1, 4, 7), (2, 5, 8), (3, 6, 9)] 从这个结果可以看出zip函数的基本运作方式。 2.示例2： 1234x = [1, 2, 3]y = [4, 5, 6, 7]xy = zip(x, y)print xy 运行的结果是： [(1, 4), (2, 5), (3, 6)] 从这个结果可以看出zip函数的长度处理方式。 3.示例3： 123x = [1, 2, 3]x = zip(x)print x 运行的结果是： [(1,), (2,), (3,)] 从这个结果可以看出zip函数在只有一个参数时运作的方式。 4.示例4： python12x = zip()print x 运行的结果是： [] 从这个结果可以看出zip函数在没有参数时运作的方式。 5.示例5： 1234567891011x = [1, 2, 3]y = [4, 5, 6]z = [7, 8, 9]xyz = zip(x, y, z)u = zip(*xyz)print u 运行的结果是： [(1, 2, 3), (4, 5, 6), (7, 8, 9)] 一般认为这是一个unzip的过程，它的运行机制是这样的： 在运行zip(*xyz)之前，xyz的值是：[(1, 4, 7), (2, 5, 8), (3, 6, 9)] 那么，zip(*xyz) 等价于 zip((1, 4, 7), (2, 5, 8), (3, 6, 9)) 所以，运行结果是：[(1, 2, 3), (4, 5, 6), (7, 8, 9)] 注：在函数调用中使用*list/tuple的方式表示将list/tuple分开，作为位置参数传递给对应函数（前提是对应函数支持不定个数的位置参数）6.示例6：123x = [1, 2, 3]r = zip(* [x] * 3)print r 运行的结果是： [(1, 1, 1), (2, 2, 2), (3, 3, 3)] 它的运行机制是这样的： [x]生成一个列表的列表，它只有一个元素x [x] * 3生成一个列表的列表，它有3个元素，[x, x, x] zip( [x] 3)的意思就明确了，zip(x, x, x)]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web版极简马里奥游戏]]></title>
    <url>%2F2018%2F12%2F04%2Fmario%2F</url>
    <content type="text"><![CDATA[几个星期前，在B站上看人写游戏，开启了我一些思路，于是想自己也写个mario的小游戏吧。小时候自己很喜欢玩这款游戏，写出来也算是追忆下自己的童年了。说搞就搞，只写了些基本的场景，感觉回头我还需要把整个场景抽象出来，可回头又是什么时候呢？我也不知道。在线游戏地址，另外附上代码仓库地址]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Raneto配置中文搜索]]></title>
    <url>%2F2018%2F09%2F20%2FranetoLurn%2F</url>
    <content type="text"><![CDATA[因工作需要，准备给公司搞个软件说明文档。但是这种东西我们又不想自己搭，于是就想找个开源的文档库。找啊找，于是就找到Raneto这么个东西。感觉还还不错，就决定用了。 官方文档还是相当清晰的。直接去github克隆，再直接npm start一下，就跑起来了。 然后我就把exampale文夹给换掉了。package.json文件夹的启动目录也换掉了。一切貌似都很顺利啊，但最后我居然发现不支持中文搜索。心里一惊，这还怎么玩！ 我就不信了，Google搜起来。于是我就看到了这篇文章Raneto部署。在文章的最后，作者给出了如下写道： 解决不能搜索中文的BUG 先下载一个lunr.js，链接：https://github.com/codepiano/lunr.js，解压并将文件夹命名为lunr，接下来进入node_modules目录，找到里面的lunr重命名为lunr2（不建议删除），然后再将刚下载的lunr复制进去。还要改一个地方，进入node_modules/raneto-core/node_modules目录，刚上面那个是一样的，将这里的lunr重命名为lunr2，再将刚下载的lunr复制进去。再次重启，这里重启的时候可能会出现error，原因是node.js少了一些库，仔细看缺了哪些库，然后npm install 然后我很兴奋啊，跟着步骤来啊。但是，我居然发现我找不到node_modules/raneto-core这个文件夹！ 后来我在github才发现gilbitron/Raneto-Core这个库已经被直接合并到gilbitron/Raneto Raneto Core LOCKEDThis codebase has been merged into the main Raneto projectNo new issues or PRs will be acceptedPlease visit the main Raneto repository 后来我就直接去Raneto的仓库上搜issues了。看到这一条Can’t search in Chinese. #41。其中有人提到codepiano/lunr.js很有用。 但是它的readme也没具体讲我怎么植入Raneto啊。 于是我又去lunr官网，想看看到底是个什么东西。文档说的很简单。我当时就把其思路简单理了下。我觉得大概思路就是，把要搜索的内容以一个数据结构来表示，然后把他们一个个放进个队列里，搜索的时候就直接遍历这个数组就好了。 比如，每篇文章都大概能分成三部分，标题，时间跟内容。我以这样的结构来表示{title:&#39;标题&#39;, dateTime:&#39;2018-01-01&#39;,conent:&#39;文章内容&#39;}.每篇文章都是这么个结构，把它们全部放到一个数组里面，搜索就是遍历这个数组里的每一项。但是既然要搜，我肯定要指定匹配数组里的每个对象的哪些个字段。于是lunr里文档里，有这么个说明。 1234567891011var idx = lunr(function () &#123; this.field('title') this.field('body') this.add(&#123; "title": "Twelfth-Night", "body": "If music be the food of love, play on: Give me excess of it…", "author": "William Shakespeare", "id": "1" &#125;)&#125;) 这里的 this.field(&#39;title&#39;); this.field(&#39;body&#39;) 就是指定要搜索匹配内容的字段名。上述意思就是，指定匹配标题跟内容字段，但是不匹配时间跟作者名。 我觉得大概就这么个意思，具体就没深究了。 说了上面一大堆，支持中文的lunr的库也找到，那怎么改Raneto呢？ 首先，我先找到了Raneto文件里的app/core/search.js文件。看到这行方法： 1234567891011function getLunr (config) &#123; if (instance === null) &#123; instance = require('lunr'); require('lunr-languages/lunr.stemmer.support')(instance); require('lunr-languages/lunr.multi')(instance); config.searchExtraLanguages.forEach(lang =&gt; require('lunr-languages/lunr.' + lang)(instance) ); &#125; return instance;&#125; 而这个方法又在search.js暴露出去的handler方法里调用。 1234567891011121314151617181920212223242526272829function handler (query, config) &#123; const contentDir = utils.normalizeDir(path.normalize(config.content_dir)); const documents = glob .sync(contentDir + '**/*.md') .map(filePath =&gt; contentProcessors.extractDocument( contentDir, filePath, config.debug )) .filter(doc =&gt; doc !== null); const lunrInstance = getLunr(config); const idx = lunrInstance(function () &#123; this.use(getStemmers(config)); this.field('title'); this.field('body'); this.ref('id'); documents.forEach((doc) =&gt; this.add(doc), this); &#125;); const results = idx.search(query); const searchResults = []; results.forEach(result =&gt; &#123; const p = pageHandler(contentDir + result.ref, config); p.excerpt = p.excerpt.replace(new RegExp('(' + query + ')', 'gim'), '&lt;span class="search-query"&gt;$1&lt;/span&gt;'); searchResults.push(p); &#125;); return searchResults;&#125; 显然getLunr这个方法是根据config.default.js的searchExtraLanguages: [&#39;ru&#39;]配置，加载支持特定语言搜索的lunr文件的。但是lunr-languages\里面没有一个支持中文的。于是我干脆就都给注释掉了，并把我下载好的codepiano/lunr.js文件，复制到了其同级目录，并引入。 1234567891011function getLunr (config) &#123; if (instance === null) &#123; instance = require('./lunr.js');//该文件lunr支持中文搜索 // require('lunr-languages/lunr.stemmer.support')(instance); // require('lunr-languages/lunr.multi')(instance); // config.searchExtraLanguages.forEach(lang =&gt; // require('lunr-languages/lunr.' + lang)(instance) // ); &#125; return instance;&#125; 同时注释掉了，handler里的this.use(getStemmers(config))调用。因为我看getStemmers也是加载config.searchExtraLanguages里的语言配置。感觉没什么用。 123456789101112131415161718function handler (query, config) &#123; const contentDir = utils.normalizeDir(path.normalize(config.content_dir)); const documents = glob .sync(contentDir + '**/*.md') .map(filePath =&gt; contentProcessors.extractDocument( contentDir, filePath, config.debug )) .filter(doc =&gt; doc !== null); const lunrInstance = getLunr(config); const idx = lunrInstance(function () &#123; //注释掉默认设置加载的lunr配置。因为上面的 lunr 文件支持中文。如果又配置config里的东西，将又还原成默认的语言搜素配置。将使中文失效。 //this.use(getStemmers(config)); this.field('title'); this.field('body'); this.ref('id'); documents.forEach((doc) =&gt; this.add(doc), this);&#125;); 重启，直接报错！缺少nodejieba模块。那就装一下，npm install --save nodejieba。 最后再次重启，感觉成了！！！就这么个东西，也是折腾了我很多时间。]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抄一首诗]]></title>
    <url>%2F2018%2F09%2F18%2FaPoem%2F</url>
    <content type="text"><![CDATA[只要再克制一下，我就会解脱这割裂我内心的阵阵绞痛；最后一次对你和爱情长叹过，我就要再回到忙碌的人生。我如今随遇而安，善于混日子，尽管这种种从未使我喜欢；纵然世上的乐趣都已飞逝，有什么悲哀能再使我心酸？给我拿酒来吧，给我摆上筵席，人本来不适于孤独的生存；我将做一个无心的浪荡子弟，随大家欢笑，不要和人共悲恸。在美好的日子里我不是如此，我原不会这样，如果不是你，逝去了，把我孤独地留下度日，你化为虚无——一切也逝去了意义。———— 拜伦《只要再克制一下》]]></content>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
</search>
